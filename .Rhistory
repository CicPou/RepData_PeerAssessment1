qplot(BaltimoreEmissions$year,BaltimoreEmissions$`sum(Emissions)`,)
BaltimoreEmissions <- NEI[which(NEI$fips=="24510"),]
BaltimoreEmissions <- BaltimoreEmissions %>% group_by(type, year)%>%summarise(emissions = sum(Emissions))
qplot(year, emissions, data = BaltimoreEmissions,
geom = c("line"), facets = .~type, xlab = "Year",
ylab = expression(paste("Total PM"["2.5"]*" Emitted (tons)")),
main = expression(paste("PM"["2.5"]*" Emissions Per Year in Baltimore City For Each Type of Source")))
png(file = "plot3.png")
qplot(year, emissions, data = BaltimoreEmissions,
geom = c("line"), facets = .~type, xlab = "Year",
ylab = expression(paste("Total PM"["2.5"]*" Emitted (tons)")),
main = expression(paste("PM"["2.5"]*" Emissions Per Year in Baltimore City For Each Type of Source")))
dev.off()
rm(BaltimoreEmissions)
SCC <- readRDS("Source_Classification_Code.rds")
str(SCC)
table(SCC$SCC)
table(SCC$Data.Category)
table(SCC$Short.Name)
table(SCC$EI.Sector)
table(SCC$Option.Group)
table(SCC$Option.Set)
head(SCC, 3)
grep("coal", SCC$SCC, value = TRUE)
grep("coal", SCC$Data.Category, value = TRUE)
grep("coal", SCC$Short.Name, value = TRUE)
grep("coal", SCC$EI.Sector, value = TRUE)
grep("coal", SCC$Option.Group, value = TRUE)
grep("coal", SCC$Option.Set, value = TRUE)
grep("coal", SCC$SCC.Level.One, value = TRUE)
grep("coal", SCC$SCC.Level.Two, value = TRUE)
grep("coal", SCC$SCC.Level.Three, value = TRUE)
grep("coal", SCC$SCC.Level.Four, value = TRUE)
grep("coal", SCC$Map.To, value = TRUE)
grep("coal", SCC$Last.Inventory.Year, value = TRUE)
grep("coal", SCC$Created_Date, value = TRUE)
grep("coal", SCC$Revised_Date, value = TRUE)
grep("coal", SCC$Usage.Notes, value = TRUE)
grep("Coal", SCC$SCC, value = TRUE)
grep("Coal", SCC$Data.Category, value = TRUE)
grep("Coal", SCC$Short.Name, value = TRUE)
grep("Coal", SCC$EI.Sector, value = TRUE)
grep("Coal", SCC$Option.Group, value = TRUE)
grep("Coal", SCC$Option.Set, value = TRUE)
grep("Coal", SCC$SCC.Level.One, value = TRUE)
grep("Coal", SCC$SCC.Level.Two, value = TRUE)
grep("Coal", SCC$SCC.Level.Three, value = TRUE)
grep("Coal", SCC$SCC.Level.Four, value = TRUE)
grep("Coal", SCC$Map.To, value = TRUE)
grep("Coal", SCC$Last.Inventory.Year, value = TRUE)
grep("Coal", SCC$Created_Date, value = TRUE)
grep("Coal", SCC$Revised_Date, value = TRUE)
grep("Coal", SCC$Usage.Notes, value = TRUE)
CoalInShortName <- grep("Coal", SCC$Short.Name)
CoalInEISector <- grep("Coal", SCC$EI.Sector)
CoalInSCCLevelThree <- grep("Coal", SCC$SCC.Level.Three)
CoalInSCCLevelFour <- grep("Coal", SCC$SCC.Level.Four)
?setdiff
setdiff(CoalInShortName,CoalInEISector)
setdiff(CoalInEISector, CoalInShortName)
setdiff(CoalInSCCLevelThree, CoalInShortName)
setdiff(CoalInSCCLevelFour, CoalInShortName)
rm(CoalInSCCLevelThree)
rm(CoalInSCCLevelFour)
unique(grep("Coal", SCC$EI.Sector, value = TRUE))
unique(grep("Coal", SCC$Short.Name, value = TRUE))
CoalinEISectorOnly <- setdiff(CoalInEISector, CoalInShortName)
SCC[CoalinEISectorOnly,]
SCC[CoalinEISectorOnly,SCC$Short.Name]
SCC[CoalinEISectorOnly, 3]
unique(grep("Coal", SCC$Short.Name, value = TRUE))
SCC[CoalinEISectorOnly, "Short.Name"]
SCC[CoalinEISectorOnly, "EI.Sector"]
length(unique(NEI$SCC))
uniqCoalinEISectorOnly)
unique(CoalinEISectorOnly)
table(CoalinEISectorOnly)
table(CoalinEISectorOnly>1)
CoalinEISectorOnly>1
count(CoalInEISector)>1
length(unique(SCC$SCC))
unique(grep("[Cc]oal", SCC$Short.Name, value = TRUE))
unique(grep("coal", SCC$Short.Name, value = TRUE))
c(CoalInShortName,CoalinEISectorOnly)
unique(c(CoalInShortName,CoalinEISector))
unique(c(CoalInShortName,CoalInEISector))
unique(grep("Coal", SCC$Short.Name),grep("Coal", SCC$EI.Sector))
unique(c(grep("Coal", SCC$Short.Name),grep("Coal", SCC$EI.Sector)))
coal <- SCC[unique(c(grep("Coal", SCC$Short.Name),grep("Coal", SCC$EI.Sector))),]
head(coal)
tail(coal)
unique(coal$Short.Name)
rm(CoalInEISector)
rm(CoalinEISectorOnly)
rm(CoalInShortName)
grep("comb", coal$SCC, value = TRUE)
grep("comb", coal$Data.Category, value = TRUE)
grep("comb", coal$Short.Name, value = TRUE)
grep("comb", coal$EI.Sector, value = TRUE)
grep("comb", coal$, value = TRUE)
grep("comb", coal, value = TRUE)
grep("Comb", coal, value = TRUE)
grep("comb", coal$Option.Group, value = TRUE)
grep("comb", coal$Option.Set, value = TRUE)
grep("comb", coal$SCC.Level.One, value = TRUE)
grep("comb", coal$SCC.Level.Two, value = TRUE)
grep("comb", coal$SCC.Level.Three, value = TRUE)
grep("comb", coal$SCC.Level.Four, value = TRUE)
grep("Comb", coal$SCC, value = TRUE)
grep("Comb", coal$Data.Category, value = TRUE)
grep("Comb", coal$EI.Sector, value = TRUE)
grep("Comb", coal$Option.Group, value = TRUE)
CombInEISector <- grep("Comb", coal$EI.Sector, value = TRUE)
CombInEISector <- grep("Comb", coal$EI.Sector)
grep("Comb", coal$Option.Set, value = TRUE)
grep("Comb", coal$SCC.Level.One, value = TRUE)
CombInLevelOne <- grep("Comb", coal$SCC.Level.One)
grep("Comb", coal$SCC.Level.Two, value = TRUE)
CombInLevelTwo <- grep("Comb", coal$SCC.Level.Two)
grep("Comb", coal$SCC.Level.Three, value = TRUE)
grep("Comb", coal$SCC.Level.Four, value = TRUE)
CombInLevelFour <- grep("Comb", coal$SCC.Level.Four)
CombInShortName <- grep("Comb", coal$Short.Name)
setdiff(CombInShortName,CombInLevelTwo)
setdiff(CombInLevelTwo,CombInShortName)
rm(CombInLevelTwo)
setdiff(CombInLevelFour,CombInShortName)
rm(CombInLevelFour)
setdiff(CombInLevelOne,CombInShortName)
setdiff(CombInEISector,CombInShortName)
rm(CombInEISector)
rm(CombInLevelOne)
grep("Coal",coal$Short.Name)
grep("Comb",coal$Short.Name)
coalcomb <- coal[grep("Comb",coal$Short.Name),]
coalcomb$Short.Name
unique(coalcomb$Short.Name)
rm(CombInShortName)
coal <- coal[grep("Comb",coal$Short.Name),]
rm(coalcomb)
length(unique(coal$SCC))
codes <- coal$SCC
codes <- as.numeric(coal$SCC)
codes <- coal$SCC
head(codes)
tail(codes)
unique(codes)
coal[which(SCC$SCC)==codes]
coal[which(SCC$SCC)==codes,]
SCC[which(SCC$SCC)==codes,]
for(i in codes) { print("hello")}
for(i in codes) { hello <- rbind(hello, "hello")}
hello <- character()
for(i in codes) { hello <- rbind(hello, "hello")}
class(NEI)
hello <- data.frame()
for(i in codes) { hello <- rbind(hello, SCC[which(SCC$SCC==i),])}
SCC[which(SCC$SCC==codes),]
class(codes)
str(codes)
for(codes in codes) { hello <- rbind(hello, SCC[which(SCC$SCC==codes),])}
head(hello)
rm(i)
rm(coal)
rm(hello)
coalNEI <- data.frame()
for(codes in codes) { coalNEI <- rbind(coalNEI, NEI[which(NEI$SCC==codes),])}
coalNEI <- data.frame()
coal <- SCC[unique(c(grep("Coal", SCC$Short.Name),
grep("Coal", SCC$EI.Sector))),]
coal <- coal[grep("Comb",coal$Short.Name),]
codes <- coal$SCC
for(codes in codes) { coalNEI <- rbind(coalNEI, NEI[which(NEI$SCC==codes),])}
head(coalNEI)
coalTotalEmissions <- tapply(coalNEI$Emissions, coalNEI$year, sum)
plot(coalTotalEmissions)
plot(coalTotalEmissions, lty = "l")
plot(coalTotalEmissions, lty = "lines")
?plot
plot(coalTotalEmissions, type = "l")
coalTotalEmissions
str(coalTotalEmissions)
dimnames(coalTotalEmissions)
names(coalTotalEmissions)
plot(coalTotalEmissions, names(coalTotalEmissions), type = "l")
plot(names(coalTotalEmissions), coalTotalEmissions, type = "l")
?plot
head(mtcars)
?cumsum
rm(list=ls())
library(swirl)
swirl()
27.40-3-3-2.35
19.05/2
9.525+3+3+2.35
7.38/2
3.65-.6
3.05/2
1.525+.6
ioulist <- read.csv("/Users/CP/random/iouList.csv", header = TRUE)
colinOwes <- sum(ioulist$amount[which(ioulist$person == "Colin")],
na.rm = TRUE)
cicelyOwes <- sum(ioulist$amount[which(ioulist$person == "Cicely")],
na.rm = TRUE)
print(colinOwes - cicelyOwes)
rm("ioulist", "cicelyOwes", "colinOwes")
ioulist <- read.csv("/Users/CP/random/iouList.csv", header = TRUE)
colinOwes <- sum(ioulist$amount[which(ioulist$person == "Colin")],
na.rm = TRUE)
cicelyOwes <- sum(ioulist$amount[which(ioulist$person == "Cicely")],
na.rm = TRUE)
print(colinOwes - cicelyOwes)
unique(ioulist$person)
is.na(ioulist$amount)
ioulist[is.na(ioulist$amount),]
?ggplot
library(ggplot2)
?ggplot
testdat <- data.frame(x = 1:100, y = rnorm(100))
testdat[50,2] <- 100 ## Here we introduce an outlier!
plot(testdat$x, testdat$y, type = "l", ylim = c(-3,3))
plot(testdat$x, testdat$y, type = "l")
plot(testdat$x, testdat$y, type = "l", ylim = c(-3, 3))
g <- ggplot(testdat, aes(x = x, y = y))
g +geom_line()
g + geom_line() + ylim(-3, 3)
g + geom_line() + coord_cartesian(ylim = c(-3, 3))
?axis
set.seed(12345)
dataMatrix <- matrix(rnorm(400), nrow = 40)
par(mar = rep(0.2, 4))
image(1:10, 1:40, t(dataMatrix)[, nrow(dataMatrix):1])
heatmap(dataMatrix)
set.seed(678910)
for (i in 1:40) {
coinFlip <- rbinom(1, size = 1, prob = 0.5) ## flip a coin
if (coinFlip) {
dataMatrix[i, ] <- dataMatrix[i, ] + rep(c(0,3), each = 5)
## if coin is heads (1/TRUE) then add a common pattern to that row
}
}
image(1:10, 1:40, t(dataMatrix)[, nrow(dataMatrix):1])
heatmap(dataMatrix)
?dist
head(dataMatrix)
head(dist(dataMatrix))
dist(dataMatrix)
hh <- hclust(dist(dataMatrix))
dataMatrixOrdered <- dataMatrix[hh$order,]
class(hh)
class(hh$order)
hh
dataMatrixOrdered <- dataMatrix[hh$order,]
class(dataMatrixOrdered)
?par
image(t(dataMatrixOrdered)[, nrow(dataMatrixOrdered):1])
par(mfrow = c(1, 3)) ## draw figures in 1 row and 3 columns
image(t(dataMatrixOrdered)[, nrow(dataMatrixOrdered):1])
?image
image(t(dataMatrixOrdered)[, nrow(dataMatrixOrdered):1])
image(t(dataMatrixOrdered)[, nrow(dataMatrixOrdered):1])
image(t(dataMatrixOrdered)[, nrow(dataMatrixOrdered):1])
plot(rowMeans(dataMatrixOrdered), 40:1, xlab = "Row Mean", ylab = "Row", pch = 19)
?par
par()
par$mar
par$$mar
par(mar)
par("mar")
par(mfrow = c(1, 3), mar = c(5, 4, 4, 2) + 0.1)
image(t(dataMatrixOrdered)[, nrow(dataMatrixOrdered):1])
plot(rowMeans(dataMatrixOrdered), 40:1, xlab = "Row Mean", ylab = "Row", pch = 19)
plot(colMeans(dataMatrixOrdered), xlab = "Column", ylab = "Column Mean", pch = 19)
hclust(dist(dataMatrix))
plot(hclust(dist(dataMatrix)))
heatmap(dataMatrix)
heatmap(dataMatrix)
hh$order
heatmap(dataMatrixOrdered)
image(t(dataMatrixOrdered)[, nrow(dataMatrixOrdered):1])
plot(rowMeans(dataMatrixOrdered), 40:1, xlab = "Row Mean", ylab = "Row", pch = 19)
plot(colMeans(dataMatrixOrdered), xlab = "Column", ylab = "Column Mean", pch = 19)
head(dataMatrixOrdered)
tail(dataMatrixOrdered)
rowMeans(dataMatrixOrdered)
plot(rowMeans(dataMatrixOrdered), xlab = "Row Mean", ylab = "Row", pch = 19)
plot(rowMeans(dataMatrixOrdered), 40:1, xlab = "Row Mean", ylab = "Row", pch = 19)
plot(rowMeans(dataMatrixOrdered), 1:40, xlab = "Row Mean", ylab = "Row", pch = 19)
image(t(dataMatrixOrdered)[, nrow(dataMatrixOrdered):1])
plot(rowMeans(dataMatrixOrdered), 40:1, xlab = "Row Mean", ylab = "Row", pch = 19)
?scale
m <- matrix(1:12, nrows = 3)
m <- matrix(data = 1:12, nrows = 3)
?"matrix"
m <- matrix(data = 1:12, nrow = 3)
m
scale(m)
?scale
scale(m, center = FALSE)
scale(m, scale = FALSE)
par(mfrow = c(1, 3))
image(t(dataMatrixOrdered)[, nrow(dataMatrixOrdered):1])
svd1 <- svd(scale(dataMatrixOrdered))
?svd
class(svd1)
svd1$v
svd1$d
svd$v[,1]
svd1$v[,1]
par(mfrow = c(1, 3))
image(t(dataMatrixOrdered)[, nrow(dataMatrixOrdered):1])
plot(svd1$u[,1], 40:1, xlab = "Row", ylab = "First left singular vector", pch = 19)
plot(svd1$v[,1], xlab = "Column", ylab = "First right singular vector", pch = 19)
image(t(dataMatrixOrdered)[, nrow(dataMatrixOrdered):1])
plot(rowMeans(dataMatrixOrdered), 40:1, xlab = "Row Mean", ylab = "Row", pch = 19)
plot(colMeans(dataMatrixOrdered), xlab = "Column", ylab = "Column Mean", pch = 19)
## plot colMeans of dataMatrixOrdered (on y axis), against column number (on
## x axis)
image(t(dataMatrixOrdered)[, nrow(dataMatrixOrdered):1])
plot(svd1$u[,1], 40:1, xlab = "Row", ylab = "First left singular vector", pch = 19)
max(svd1$u[,1])
min(svd1$u[,1])
plot(svd1$v[,1], xlab = "Column", ylab = "First right singular vector", pch = 19)
plot(svd1$v[,2], xlab = "Column", ylab = "First right singular vector", pch = 19)
image(t(dataMatrixOrdered)[, nrow(dataMatrixOrdered):1])
## create an image of the values in dataMatrixOrdered, as above
plot(svd1$u[,1], 40:1, xlab = "Row", ylab = "First left singular vector", pch = 19)
## I think the row and column labels are the wrong way around in this example...
plot(svd1$v[,1], xlab = "Column", ylab = "First right singular vector", pch = 19)
par(mfrow = c(1, 3))
image(t(dataMatrixOrdered)[, nrow(dataMatrixOrdered):1])
## create an image of the values in dataMatrixOrdered, as above
plot(svd1$u[,1], 40:1, xlab = "Row", ylab = "First left singular vector", pch = 19)
## I think the row and column labels are the wrong way around in this example...
plot(svd1$v[,1], xlab = "Column", ylab = "First right singular vector", pch = 19)
par(mfrow = c(1, 2))
2^2
2^3
svd1$d^2
sum(svd1$d^2)
svd1$d^2/sum(svd1$d^2)
?par
set.seed(3435)
trainIndicator <- rbinom(4601, size = 1, prob = 0.5)
head(trainIndicator)
head(trainIndicator, 10)
table(trainIndicator)
log10(0)
log(1)
log10(1)
log9(1)
log2(1)
log3(1)
log4(1)
log5(1)
log6(1)
?log
test <- c(1,2,3,4,5,6)
log(test)
plot(log(test))
plot(test)
plot(log(test))
test <- c(1,10,100,1000,10000)
plot(log(test))
plot(test)
plot(log(test))
test <- matrix(1:12, nrow = 3)
test
t(test)
?t
dist(test)
dist(t(test))
Asqrt(8)
sqrt(8)
sqrt(20)
test2 <- dist(t(test))
str(test2)
?dist
6^2 + 15^2
sqrt(261)
1-4
2-5
3-6
3*9
sqrt(27)
test
t(test)
?reformulate
?predict
dim(trainIndicator)
dim(test2)
?dim
dim(test)
test
nrows(test)
nrow(test)
install.packages("knitr")
a <- 9.8-2.5-.6
a/2
a <- a/2
a +.6+2.5
a <- 16.07 - 2.59 - 1.8
a <- a/2
source("../random/colinOwes.R")
rm(a)
activity <- read.csv("activity.csv")
setwd("../Github/RepData_PeerAssessment1/")
activity <- read.csv("activity.csv")
total <- tapply(activity$steps, activity$date, sum)
total
activity[1:100,]
activity[101:200,]
activity[201:300,]
activity[201:300,]
activity[301:400,]
activity[401:500,]
activity[501:600,]
head(total)
hist1 <- hist(total, main = "Distribution of Total Steps per Day", xlab = "Steps")
mean <- tapply(activity$steps, activity$date, mean)
head(mean)
mean(total)
mean(total, na.rm = TRUE)
median(total, na.rm = TRUE)
median(total)
mean <- mean(total, na.rm = TRUE)
median <- median(total, na.rm = TRUE)
meanmed <- cbind(mean, median)
meanmed
?xtable
library(xtable)
?xtable
intervalMean <- tapply(activity$steps, activity$interval, mean, na.rm = TRUE)
head(intervalMean)
activity[which(activity$interval)==0,]
activity[which(activity$interval==0),]
zero <- activity[which(activity$interval==0),]
mean(zero)
mean(zero$steps)
mean(zero$steps, na.rm = TRUE)
rm(zero)
plot(unique(activity$interval), intervalMean, type = "l",
main = "Average Daily Activity Pattern", xlab = "Time", ylab = "Steps")
max <- which.max(intervalMean)
maxInterval <- names(max)
NAs <- table(is.na(activity))[["TRUE"]]
imputed <- activity
l <- length(imputed$steps)
for(i in 1:l) {
if(is.na(imputed$steps[i] == TRUE)) {
imputed$steps[i] <- intervalMean[[which(names(intervalMean)==imputed$interval[i])]]
}
}
The overlapping colours show that the distribution is generally the same apart from the 10,000 to 15,000 steps range, where the imputation of missing values has caused this to occur more frequently.
imputedTotal <- tapply(imputed$steps, imputed$date, sum)
hist2 <- hist(imputedTotal, main = "Distribution of Total Steps per Day for Imputed Data Set", xlab = "Steps")
imputedMean <- mean(imputedTotal)
imputedMedian <- median(imputedTotal)
weekday(imputed$date)
?weekday()
library(lubridate)
weekday <- wday(imputed$date)
weekday <- wday(imputed$date, label = TRUE)
imputed$weekday <- wday(imputed$date, label = TRUE)
head(imputed)
levels(activity$weekday)
levels(imputed$weekday)
for(i in 1:l) {
if(imputed$weekday[i] == "Sat")) {
imputed$compare[i] <- "weekend"
}
}
}
for(i in 1:l) {
if(imputed$weekday[i] == "Sat") {
imputed$compare[i] <- "weekend"
}
}
head(imputed)
for(i in 1:l) {
if(imputed$weekday[i] == "Sat" | "Sun") {
imputed$compare[i] <- "weekend"
}
}
for(i in 1:l) {
if(imputed$weekday[i] == "Sat" || "Sun") {
imputed$compare[i] <- "weekend"
}
}
for(i in 1:l) {
if(imputed$weekday[i] == "Sat" | imputed$weekday == "Sun") {
imputed$compare[i] <- "weekend"
}
}
for(i in 1:l) {
if(imputed$weekday[i] == "Sat") {
imputed$compare[i] <- "weekend"
} else if(imputed$weekday[i] == "Sun") {
imputed$compare[i] <- "weekend"
} else {
imputed$compare[i] <- "weekday"
}
}
imputed[1:100,]
imputed[101:200,]
imputed[201:300,]
imputed[301:400,]
imputed[1000:1100,]
imputed[1500:1600,]
hello <- as.factor(imputed$compare)
imputed$compare <- as.factor(imputed$compare)
rm(list=ls())
